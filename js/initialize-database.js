// Скрипт для инициализации базы данных

import { supabaseClient } from './modules/database.js';

// Функция для инициализации базы данных
async function initializeDatabase() {
  console.log('Проверяем инициализацию базы данных...');

  // !! Важно !!
  // Код для создания таблиц и функций был удален.
  // Предполагается, что структура БД (таблицы users, checkins, referrals)
  // и функция increment_xp уже существуют в Supabase.
  // Управление схемой БД должно производиться через Supabase Dashboard или миграции.

  try {
    // Простая проверка соединения/доступности таблицы users
    const { error } = await supabaseClient
      .from('users')
      .select('id')
      .limit(1);

    if (error) {
      console.error('Ошибка при проверке доступа к таблице users:', error);
      // Можно добавить обработку, если таблица недоступна
      // Например, показать сообщение пользователю
      return false; // Обозначаем, что инициализация (проверка) не удалась
    } else {
      console.log('База данных доступна (таблица users найдена).');
      return true; // Инициализация (проверка) успешна
    }

  } catch (catchError) {
    console.error('Критическая ошибка при проверке инициализации базы данных:', catchError);
    return false;
  }
}

// Экспортируем функцию для использования в других модулях
window.initializeDatabase = initializeDatabase;

// Запускаем проверку инициализации базы данных при загрузке скрипта
initializeDatabase().then(success => {
  if (success) {
    console.log('Проверка инициализации базы данных завершена успешно.');
    // Можно добавить логику, которая должна выполниться после успешной проверки
    // Например, запуск основного UI приложения
  } else {
    console.error('Ошибка при проверке инициализации базы данных.');
    // Можно добавить обработку ошибки, например, показать сообщение пользователю
  }
}).catch(error => {
  console.error('Критическая ошибка при запуске проверки инициализации базы данных:', error);
});